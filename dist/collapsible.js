/**
 * Collapse navbar items dynamically, when there isn't enough space on the screen.
 *
 * @param {String} selector The selector for the items' container
 * @param {Number} threshold The minimum available space in the container
 */
class Collapsible {
  constructor(selector, threshold) {
    this.container = this.queryContainer(selector);
    this.threshold = threshold;
    this.items = this.container.querySelectorAll('li');
    this.itemsDimensions = this.getItemsDimensions();
  }
  /**
   * Given the selector, query the items' container.
   * If it is unreachable, an exception is throwed.
   * 
   * @param {String} selector
   * @returns {*} The items' container element
   */


  queryContainer(selector) {
    const container = document.querySelector(selector);

    if (!container) {
      throw new Error('Collapsible: No element find using "' + selector + '" selector');
    }

    return container;
  }
  /**
   * /Get initial dimensions for each item, in order to approximate
   * the space necessary to render them all.
   */


  getItemsDimensions() {
    const dimensions = [];

    for (let i = 0; i < this.items.length; i++) {
      const item = this.items[i];
      const width = item.getBoundingClientRect().width;
      dimensions.push(width);
    }

    return dimensions;
  }
  /**
   * Inject the collapsed menu which will contain the exceeding items.
   * The default content is meant to act like a placeholder.
   * You should customize this method based on your needs.
   */


  inject() {
    const menu = document.createElement('li');
    menu.classList.add('collapsible-menu');
    const dropdownList = document.createElement('ul');
    dropdownList.classList.add('dropdown-menu', 'collapsible-dropdown-list');
    const icon = document.createElement('span');
    icon.classList.add('fas', 'fa-bars');
    const dropdown = document.createElement('div');
    dropdown.classList.add('dropdown', 'collapsible-dropdown');
    const button = document.createElement('button');
    button.classList.add('btn', 'dropdown-toggle', 'collapsible-toggle'); // Copy items from the original navbar

    this.items.forEach(item => {
      const clone = item.cloneNode(true);
      clone.classList.add('hide');
      dropdownList.append(clone);
    });
    button.append(icon);
    dropdown.append(button);
    dropdown.append(dropdownList);
    menu.append(dropdown);
    this.container.append(menu);
  }
  /**
   * Initialize the resize sensor and assign it the right callback,
   * containing the code to collapse exceeding items when needed.
   */


  render() {
    this.inject();
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbGxhcHNpYmxlLmpzIl0sIm5hbWVzIjpbIkNvbGxhcHNpYmxlIiwiY29uc3RydWN0b3IiLCJzZWxlY3RvciIsInRocmVzaG9sZCIsImNvbnRhaW5lciIsInF1ZXJ5Q29udGFpbmVyIiwiaXRlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXRlbXNEaW1lbnNpb25zIiwiZ2V0SXRlbXNEaW1lbnNpb25zIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiRXJyb3IiLCJkaW1lbnNpb25zIiwiaSIsImxlbmd0aCIsIml0ZW0iLCJ3aWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInB1c2giLCJpbmplY3QiLCJtZW51IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImRyb3Bkb3duTGlzdCIsImljb24iLCJkcm9wZG93biIsImJ1dHRvbiIsImZvckVhY2giLCJjbG9uZSIsImNsb25lTm9kZSIsImFwcGVuZCIsInJlbmRlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLE1BQU1BLFdBQU4sQ0FBa0I7QUFDZEMsRUFBQUEsV0FBVyxDQUFDQyxRQUFELEVBQVdDLFNBQVgsRUFBc0I7QUFDN0IsU0FBS0MsU0FBTCxHQUFpQixLQUFLQyxjQUFMLENBQW9CSCxRQUFwQixDQUFqQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJBLFNBQWpCO0FBRUEsU0FBS0csS0FBTCxHQUFhLEtBQUtGLFNBQUwsQ0FBZUcsZ0JBQWYsQ0FBZ0MsSUFBaEMsQ0FBYjtBQUNBLFNBQUtDLGVBQUwsR0FBdUIsS0FBS0Msa0JBQUwsRUFBdkI7QUFDSDtBQUVEOzs7Ozs7Ozs7QUFPQUosRUFBQUEsY0FBYyxDQUFDSCxRQUFELEVBQVc7QUFDckIsVUFBTUUsU0FBUyxHQUFHTSxRQUFRLENBQUNDLGFBQVQsQ0FBdUJULFFBQXZCLENBQWxCOztBQUVBLFFBQUksQ0FBQ0UsU0FBTCxFQUFnQjtBQUNaLFlBQU0sSUFBSVEsS0FBSixDQUFVLHlDQUF5Q1YsUUFBekMsR0FBb0QsWUFBOUQsQ0FBTjtBQUNIOztBQUVELFdBQU9FLFNBQVA7QUFDSDtBQUVEOzs7Ozs7QUFJQUssRUFBQUEsa0JBQWtCLEdBQUc7QUFDakIsVUFBTUksVUFBVSxHQUFHLEVBQW5COztBQUVBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLUixLQUFMLENBQVdTLE1BQS9CLEVBQXVDRCxDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQU1FLElBQUksR0FBSSxLQUFLVixLQUFMLENBQVdRLENBQVgsQ0FBZDtBQUNBLFlBQU1HLEtBQUssR0FBR0QsSUFBSSxDQUFDRSxxQkFBTCxHQUE2QkQsS0FBM0M7QUFFQUosTUFBQUEsVUFBVSxDQUFDTSxJQUFYLENBQWdCRixLQUFoQjtBQUNIOztBQUVELFdBQU9KLFVBQVA7QUFDSDtBQUVEOzs7Ozs7O0FBS0FPLEVBQUFBLE1BQU0sR0FBRztBQUNMLFVBQU1DLElBQUksR0FBR1gsUUFBUSxDQUFDWSxhQUFULENBQXVCLElBQXZCLENBQWI7QUFDQUQsSUFBQUEsSUFBSSxDQUFDRSxTQUFMLENBQWVDLEdBQWYsQ0FBbUIsa0JBQW5CO0FBRUEsVUFBTUMsWUFBWSxHQUFHZixRQUFRLENBQUNZLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBckI7QUFDQUcsSUFBQUEsWUFBWSxDQUFDRixTQUFiLENBQXVCQyxHQUF2QixDQUEyQixlQUEzQixFQUE0QywyQkFBNUM7QUFFQSxVQUFNRSxJQUFJLEdBQUdoQixRQUFRLENBQUNZLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBYjtBQUNBSSxJQUFBQSxJQUFJLENBQUNILFNBQUwsQ0FBZUMsR0FBZixDQUFtQixLQUFuQixFQUEwQixTQUExQjtBQUVBLFVBQU1HLFFBQVEsR0FBR2pCLFFBQVEsQ0FBQ1ksYUFBVCxDQUF1QixLQUF2QixDQUFqQjtBQUNBSyxJQUFBQSxRQUFRLENBQUNKLFNBQVQsQ0FBbUJDLEdBQW5CLENBQXVCLFVBQXZCLEVBQW1DLHNCQUFuQztBQUVBLFVBQU1JLE1BQU0sR0FBR2xCLFFBQVEsQ0FBQ1ksYUFBVCxDQUF1QixRQUF2QixDQUFmO0FBQ0FNLElBQUFBLE1BQU0sQ0FBQ0wsU0FBUCxDQUFpQkMsR0FBakIsQ0FBcUIsS0FBckIsRUFBNEIsaUJBQTVCLEVBQStDLG9CQUEvQyxFQWRLLENBZ0JMOztBQUNBLFNBQUtsQixLQUFMLENBQVd1QixPQUFYLENBQW9CYixJQUFELElBQVU7QUFDekIsWUFBTWMsS0FBSyxHQUFHZCxJQUFJLENBQUNlLFNBQUwsQ0FBZSxJQUFmLENBQWQ7QUFFQUQsTUFBQUEsS0FBSyxDQUFDUCxTQUFOLENBQWdCQyxHQUFoQixDQUFvQixNQUFwQjtBQUNBQyxNQUFBQSxZQUFZLENBQUNPLE1BQWIsQ0FBb0JGLEtBQXBCO0FBQ0gsS0FMRDtBQU9BRixJQUFBQSxNQUFNLENBQUNJLE1BQVAsQ0FBY04sSUFBZDtBQUNBQyxJQUFBQSxRQUFRLENBQUNLLE1BQVQsQ0FBZ0JKLE1BQWhCO0FBQ0FELElBQUFBLFFBQVEsQ0FBQ0ssTUFBVCxDQUFnQlAsWUFBaEI7QUFFQUosSUFBQUEsSUFBSSxDQUFDVyxNQUFMLENBQVlMLFFBQVo7QUFDQSxTQUFLdkIsU0FBTCxDQUFlNEIsTUFBZixDQUFzQlgsSUFBdEI7QUFDSDtBQUVEOzs7Ozs7QUFJQVksRUFBQUEsTUFBTSxHQUFHO0FBQ0wsU0FBS2IsTUFBTDtBQUNIOztBQXRGYSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29sbGFwc2UgbmF2YmFyIGl0ZW1zIGR5bmFtaWNhbGx5LCB3aGVuIHRoZXJlIGlzbid0IGVub3VnaCBzcGFjZSBvbiB0aGUgc2NyZWVuLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvciBUaGUgc2VsZWN0b3IgZm9yIHRoZSBpdGVtcycgY29udGFpbmVyXG4gKiBAcGFyYW0ge051bWJlcn0gdGhyZXNob2xkIFRoZSBtaW5pbXVtIGF2YWlsYWJsZSBzcGFjZSBpbiB0aGUgY29udGFpbmVyXG4gKi9cbmNsYXNzIENvbGxhcHNpYmxlIHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3RvciwgdGhyZXNob2xkKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5xdWVyeUNvbnRhaW5lcihzZWxlY3Rvcik7XG4gICAgICAgIHRoaXMudGhyZXNob2xkID0gdGhyZXNob2xkO1xuXG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xuICAgICAgICB0aGlzLml0ZW1zRGltZW5zaW9ucyA9IHRoaXMuZ2V0SXRlbXNEaW1lbnNpb25zKCk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEdpdmVuIHRoZSBzZWxlY3RvciwgcXVlcnkgdGhlIGl0ZW1zJyBjb250YWluZXIuXG4gICAgICogSWYgaXQgaXMgdW5yZWFjaGFibGUsIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd2VkLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvclxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgaXRlbXMnIGNvbnRhaW5lciBlbGVtZW50XG4gICAgICovXG4gICAgcXVlcnlDb250YWluZXIoc2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgXG4gICAgICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbGxhcHNpYmxlOiBObyBlbGVtZW50IGZpbmQgdXNpbmcgXCInICsgc2VsZWN0b3IgKyAnXCIgc2VsZWN0b3InKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIC9HZXQgaW5pdGlhbCBkaW1lbnNpb25zIGZvciBlYWNoIGl0ZW0sIGluIG9yZGVyIHRvIGFwcHJveGltYXRlXG4gICAgICogdGhlIHNwYWNlIG5lY2Vzc2FyeSB0byByZW5kZXIgdGhlbSBhbGwuXG4gICAgICovXG4gICAgZ2V0SXRlbXNEaW1lbnNpb25zKCkge1xuICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gW107XG4gICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSAgPSB0aGlzLml0ZW1zW2ldO1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgIFxuICAgICAgICAgICAgZGltZW5zaW9ucy5wdXNoKHdpZHRoKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gZGltZW5zaW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmplY3QgdGhlIGNvbGxhcHNlZCBtZW51IHdoaWNoIHdpbGwgY29udGFpbiB0aGUgZXhjZWVkaW5nIGl0ZW1zLlxuICAgICAqIFRoZSBkZWZhdWx0IGNvbnRlbnQgaXMgbWVhbnQgdG8gYWN0IGxpa2UgYSBwbGFjZWhvbGRlci5cbiAgICAgKiBZb3Ugc2hvdWxkIGN1c3RvbWl6ZSB0aGlzIG1ldGhvZCBiYXNlZCBvbiB5b3VyIG5lZWRzLlxuICAgICAqL1xuICAgIGluamVjdCgpIHtcbiAgICAgICAgY29uc3QgbWVudSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgIG1lbnUuY2xhc3NMaXN0LmFkZCgnY29sbGFwc2libGUtbWVudScpO1xuXG4gICAgICAgIGNvbnN0IGRyb3Bkb3duTGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgICAgIGRyb3Bkb3duTGlzdC5jbGFzc0xpc3QuYWRkKCdkcm9wZG93bi1tZW51JywgJ2NvbGxhcHNpYmxlLWRyb3Bkb3duLWxpc3QnKTtcblxuICAgICAgICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBpY29uLmNsYXNzTGlzdC5hZGQoJ2ZhcycsICdmYS1iYXJzJyk7XG5cbiAgICAgICAgY29uc3QgZHJvcGRvd24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZHJvcGRvd24uY2xhc3NMaXN0LmFkZCgnZHJvcGRvd24nLCAnY29sbGFwc2libGUtZHJvcGRvd24nKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnYnRuJywgJ2Ryb3Bkb3duLXRvZ2dsZScsICdjb2xsYXBzaWJsZS10b2dnbGUnKTtcblxuICAgICAgICAvLyBDb3B5IGl0ZW1zIGZyb20gdGhlIG9yaWdpbmFsIG5hdmJhclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNsb25lID0gaXRlbS5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgICAgICAgIGNsb25lLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbiAgICAgICAgICAgIGRyb3Bkb3duTGlzdC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBidXR0b24uYXBwZW5kKGljb24pO1xuICAgICAgICBkcm9wZG93bi5hcHBlbmQoYnV0dG9uKTtcbiAgICAgICAgZHJvcGRvd24uYXBwZW5kKGRyb3Bkb3duTGlzdCk7XG5cbiAgICAgICAgbWVudS5hcHBlbmQoZHJvcGRvd24pO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQobWVudSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSB0aGUgcmVzaXplIHNlbnNvciBhbmQgYXNzaWduIGl0IHRoZSByaWdodCBjYWxsYmFjayxcbiAgICAgKiBjb250YWluaW5nIHRoZSBjb2RlIHRvIGNvbGxhcHNlIGV4Y2VlZGluZyBpdGVtcyB3aGVuIG5lZWRlZC5cbiAgICAgKi9cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuaW5qZWN0KCk7XG4gICAgfVxufVxuIl0sImZpbGUiOiJjb2xsYXBzaWJsZS5qcyJ9
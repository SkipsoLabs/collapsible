/**
 * Collapse navbar items dynamically, when there isn't enough space on the screen.
 *
 * @param {String} selector The selector for the items' container
 * @param {Number} threshold The minimum available space in the container
 */
class Collapsible {
  constructor(selector, threshold) {
    this.container = this.queryContainer(selector);
    this.threshold = threshold;
    this.items = this.container.querySelectorAll('li');
    this.itemsDimensions = this.getItemsDimensions();
  }
  /**
   * Given the selector, query the items' container.
   * If it is unreachable, an exception is throwed.
   * 
   * @param {String} selector
   * @returns {*} The items' container element
   */


  queryContainer(selector) {
    const container = document.querySelector(selector);

    if (!container) {
      throw new Error('Collapsible: No element find using "' + selector + '" selector');
    }

    return container;
  }
  /**
   * Get initial dimensions for each item, in order to approximate
   * the space necessary to render them all.
   */


  getItemsDimensions() {
    const dimensions = [];

    for (let i = 0; i < this.items.length; i++) {
      const item = this.items[i];
      const width = item.getBoundingClientRect().width;
      dimensions.push(width);
    }

    return dimensions;
  }
  /**
   * Calculate the available space based on the page width, and return
   * the amount of items we must collapse.
   * 
   * @returns {Number} Amount of items to collapse
   */


  getAmountOfItemsToCollapse() {
    const renderable = {
      amount: 0,
      width: 0
    };
    const pageWidth = document.body.offsetWidth;

    for (let i = 0; i < this.items.length; i++) {
      const itemWidth = this.itemsDimensions[i];
      renderable.width += itemWidth;
      if (pageWidth - renderable.width < this.threshold) break;
      renderable.amount++;
    }

    return this.items.length - renderable.amount;
  }

  collapse() {
    const menu = this.container.querySelector('.collapsible-menu');
    const dropdown = menu.querySelector('.collapsible-dropdown');
    const dropdownItems = dropdown.querySelectorAll('li');
    const amountOfItemsToCollapse = this.getAmountOfItemsToCollapse(); // Default case on large screens and when there is enough space

    menu.classList.remove('hide');

    if (amountOfItemsToCollapse === 0) {
      menu.classList.add('hide');
    } // Clear the state for each item: both in the original list and in the collapsed one


    this.items.forEach((item, index) => {
      const clone = dropdownItems[index];
      item.classList.remove('hide');
      clone.classList.remove('visible');
    });

    for (let i = 0; i < amountOfItemsToCollapse; i++) {
      const index = this.items.length - i - 1;
      const item = this.items[index];
      const clone = dropdownItems[index];
      item.classList.add('hide');
      clone.classList.add('visible');
    }
  }
  /**
   * Inject the collapsed menu which will contain the exceeding items.
   * The default content is meant to act like a placeholder.
   * You should customize this method based on your needs.
   */


  inject() {
    const menu = document.createElement('li');
    menu.classList.add('collapsible-menu');
    const dropdownList = document.createElement('ul');
    dropdownList.classList.add('dropdown-menu', 'collapsible-dropdown-list');
    const icon = document.createElement('span');
    icon.classList.add('fas', 'fa-bars');
    const dropdown = document.createElement('div');
    dropdown.classList.add('dropdown', 'collapsible-dropdown');
    const button = document.createElement('button');
    button.classList.add('btn', 'dropdown-toggle', 'collapsible-toggle'); // Copy items from the original navbar

    this.items.forEach(item => {
      const clone = item.cloneNode(true);
      clone.classList.add('hide');
      dropdownList.append(clone);
    });
    button.append(icon);
    dropdown.append(button);
    dropdown.append(dropdownList);
    menu.append(dropdown);
    this.container.append(menu);
  }
  /**
   * Initialize the resize sensor and assign it the right callback,
   * containing the code to collapse exceeding items when needed.
   */


  render() {
    this.inject();
    this.collapse();
    new ResizeSensor(this.container, this.collapse.bind(this));
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbGxhcHNpYmxlLmpzIl0sIm5hbWVzIjpbIkNvbGxhcHNpYmxlIiwiY29uc3RydWN0b3IiLCJzZWxlY3RvciIsInRocmVzaG9sZCIsImNvbnRhaW5lciIsInF1ZXJ5Q29udGFpbmVyIiwiaXRlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXRlbXNEaW1lbnNpb25zIiwiZ2V0SXRlbXNEaW1lbnNpb25zIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiRXJyb3IiLCJkaW1lbnNpb25zIiwiaSIsImxlbmd0aCIsIml0ZW0iLCJ3aWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInB1c2giLCJnZXRBbW91bnRPZkl0ZW1zVG9Db2xsYXBzZSIsInJlbmRlcmFibGUiLCJhbW91bnQiLCJwYWdlV2lkdGgiLCJib2R5Iiwib2Zmc2V0V2lkdGgiLCJpdGVtV2lkdGgiLCJjb2xsYXBzZSIsIm1lbnUiLCJkcm9wZG93biIsImRyb3Bkb3duSXRlbXMiLCJhbW91bnRPZkl0ZW1zVG9Db2xsYXBzZSIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsImZvckVhY2giLCJpbmRleCIsImNsb25lIiwiaW5qZWN0IiwiY3JlYXRlRWxlbWVudCIsImRyb3Bkb3duTGlzdCIsImljb24iLCJidXR0b24iLCJjbG9uZU5vZGUiLCJhcHBlbmQiLCJyZW5kZXIiLCJSZXNpemVTZW5zb3IiLCJiaW5kIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBTUEsTUFBTUEsV0FBTixDQUFrQjtBQUNkQyxFQUFBQSxXQUFXLENBQUNDLFFBQUQsRUFBV0MsU0FBWCxFQUFzQjtBQUM3QixTQUFLQyxTQUFMLEdBQWlCLEtBQUtDLGNBQUwsQ0FBb0JILFFBQXBCLENBQWpCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQkEsU0FBakI7QUFFQSxTQUFLRyxLQUFMLEdBQWEsS0FBS0YsU0FBTCxDQUFlRyxnQkFBZixDQUFnQyxJQUFoQyxDQUFiO0FBQ0EsU0FBS0MsZUFBTCxHQUF1QixLQUFLQyxrQkFBTCxF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QkFBNUIsRUFBK0Msb0JBQS9DLEVBZEssQ0FnQkw7O0FBQ0EsU0FBSzVCLEtBQUwsQ0FBVzZCLE9BQVgsQ0FBb0JuQixJQUFELElBQVU7QUFDekIsWUFBTXFCLEtBQUssR0FBR3JCLElBQUksQ0FBQzJCLFNBQUwsQ0FBZSxJQUFmLENBQWQ7QUFFQU4sTUFBQUEsS0FBSyxDQUFDTCxTQUFOLENBQWdCRSxHQUFoQixDQUFvQixNQUFwQjtBQUNBTSxNQUFBQSxZQUFZLENBQUNJLE1BQWIsQ0FBb0JQLEtBQXBCO0FBQ0gsS0FMRDtBQU9BSyxJQUFBQSxNQUFNLENBQUNFLE1BQVAsQ0FBY0gsSUFBZDtBQUNBWixJQUFBQSxRQUFRLENBQUNlLE1BQVQsQ0FBZ0JGLE1BQWhCO0FBQ0FiLElBQUFBLFFBQVEsQ0FBQ2UsTUFBVCxDQUFnQkosWUFBaEI7QUFFQVosSUFBQUEsSUFBSSxDQUFDZ0IsTUFBTCxDQUFZZixRQUFaO0FBQ0EsU0FBS3pCLFNBQUwsQ0FBZXdDLE1BQWYsQ0FBc0JoQixJQUF0QjtBQUNIO0FBRUQ7Ozs7OztBQUlBaUIsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsU0FBS1AsTUFBTDtBQUNBLFNBQUtYLFFBQUw7QUFDQSxRQUFJbUIsWUFBSixDQUFpQixLQUFLMUMsU0FBdEIsRUFBaUMsS0FBS3VCLFFBQUwsQ0FBY29CLElBQWQsQ0FBbUIsSUFBbkIsQ0FBakM7QUFDSDs7QUE5SWEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbGxhcHNlIG5hdmJhciBpdGVtcyBkeW5hbWljYWxseSwgd2hlbiB0aGVyZSBpc24ndCBlbm91Z2ggc3BhY2Ugb24gdGhlIHNjcmVlbi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3IgVGhlIHNlbGVjdG9yIGZvciB0aGUgaXRlbXMnIGNvbnRhaW5lclxuICogQHBhcmFtIHtOdW1iZXJ9IHRocmVzaG9sZCBUaGUgbWluaW11bSBhdmFpbGFibGUgc3BhY2UgaW4gdGhlIGNvbnRhaW5lclxuICovXG5jbGFzcyBDb2xsYXBzaWJsZSB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3IsIHRocmVzaG9sZCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMucXVlcnlDb250YWluZXIoc2VsZWN0b3IpO1xuICAgICAgICB0aGlzLnRocmVzaG9sZCA9IHRocmVzaG9sZDtcblxuICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnbGknKTtcbiAgICAgICAgdGhpcy5pdGVtc0RpbWVuc2lvbnMgPSB0aGlzLmdldEl0ZW1zRGltZW5zaW9ucygpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBHaXZlbiB0aGUgc2VsZWN0b3IsIHF1ZXJ5IHRoZSBpdGVtcycgY29udGFpbmVyLlxuICAgICAqIElmIGl0IGlzIHVucmVhY2hhYmxlLCBhbiBleGNlcHRpb24gaXMgdGhyb3dlZC5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7Kn0gVGhlIGl0ZW1zJyBjb250YWluZXIgZWxlbWVudFxuICAgICAqL1xuICAgIHF1ZXJ5Q29udGFpbmVyKHNlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIFxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2xsYXBzaWJsZTogTm8gZWxlbWVudCBmaW5kIHVzaW5nIFwiJyArIHNlbGVjdG9yICsgJ1wiIHNlbGVjdG9yJyk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgaW5pdGlhbCBkaW1lbnNpb25zIGZvciBlYWNoIGl0ZW0sIGluIG9yZGVyIHRvIGFwcHJveGltYXRlXG4gICAgICogdGhlIHNwYWNlIG5lY2Vzc2FyeSB0byByZW5kZXIgdGhlbSBhbGwuXG4gICAgICovXG4gICAgZ2V0SXRlbXNEaW1lbnNpb25zKCkge1xuICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gW107XG4gICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSAgPSB0aGlzLml0ZW1zW2ldO1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgIFxuICAgICAgICAgICAgZGltZW5zaW9ucy5wdXNoKHdpZHRoKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gZGltZW5zaW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIGF2YWlsYWJsZSBzcGFjZSBiYXNlZCBvbiB0aGUgcGFnZSB3aWR0aCwgYW5kIHJldHVyblxuICAgICAqIHRoZSBhbW91bnQgb2YgaXRlbXMgd2UgbXVzdCBjb2xsYXBzZS5cbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBBbW91bnQgb2YgaXRlbXMgdG8gY29sbGFwc2VcbiAgICAgKi9cbiAgICBnZXRBbW91bnRPZkl0ZW1zVG9Db2xsYXBzZSgpIHtcbiAgICAgICAgY29uc3QgcmVuZGVyYWJsZSA9IHsgYW1vdW50OiAwLCB3aWR0aDogMCB9O1xuICAgICAgICBjb25zdCBwYWdlV2lkdGggPSBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbVdpZHRoID0gdGhpcy5pdGVtc0RpbWVuc2lvbnNbaV07XG4gICAgICAgICAgICByZW5kZXJhYmxlLndpZHRoICs9IGl0ZW1XaWR0aDtcblxuICAgICAgICAgICAgaWYgKChwYWdlV2lkdGggLSByZW5kZXJhYmxlLndpZHRoKSA8IHRoaXMudGhyZXNob2xkKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICByZW5kZXJhYmxlLmFtb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMubGVuZ3RoIC0gcmVuZGVyYWJsZS5hbW91bnQ7XG4gICAgfVxuXG4gICAgY29sbGFwc2UoKSB7XG4gICAgICAgIGNvbnN0IG1lbnUgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuY29sbGFwc2libGUtbWVudScpO1xuICAgICAgICBjb25zdCBkcm9wZG93biA9IG1lbnUucXVlcnlTZWxlY3RvcignLmNvbGxhcHNpYmxlLWRyb3Bkb3duJyk7XG4gICAgICAgIGNvbnN0IGRyb3Bkb3duSXRlbXMgPSBkcm9wZG93bi5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xuICAgICAgICBjb25zdCBhbW91bnRPZkl0ZW1zVG9Db2xsYXBzZSA9IHRoaXMuZ2V0QW1vdW50T2ZJdGVtc1RvQ29sbGFwc2UoKTtcblxuICAgICAgICAvLyBEZWZhdWx0IGNhc2Ugb24gbGFyZ2Ugc2NyZWVucyBhbmQgd2hlbiB0aGVyZSBpcyBlbm91Z2ggc3BhY2VcbiAgICAgICAgbWVudS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoYW1vdW50T2ZJdGVtc1RvQ29sbGFwc2UgPT09IDApIHtcbiAgICAgICAgICBtZW51LmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENsZWFyIHRoZSBzdGF0ZSBmb3IgZWFjaCBpdGVtOiBib3RoIGluIHRoZSBvcmlnaW5hbCBsaXN0IGFuZCBpbiB0aGUgY29sbGFwc2VkIG9uZVxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZSA9IGRyb3Bkb3duSXRlbXNbaW5kZXhdO1xuXG4gICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbiAgICAgICAgICAgIGNsb25lLmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbW91bnRPZkl0ZW1zVG9Db2xsYXBzZTsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuaXRlbXMubGVuZ3RoIC0gaSAtIDE7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5pdGVtc1tpbmRleF07XG4gICAgICAgICAgICBjb25zdCBjbG9uZSA9IGRyb3Bkb3duSXRlbXNbaW5kZXhdO1xuXG4gICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbiAgICAgICAgICAgIGNsb25lLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluamVjdCB0aGUgY29sbGFwc2VkIG1lbnUgd2hpY2ggd2lsbCBjb250YWluIHRoZSBleGNlZWRpbmcgaXRlbXMuXG4gICAgICogVGhlIGRlZmF1bHQgY29udGVudCBpcyBtZWFudCB0byBhY3QgbGlrZSBhIHBsYWNlaG9sZGVyLlxuICAgICAqIFlvdSBzaG91bGQgY3VzdG9taXplIHRoaXMgbWV0aG9kIGJhc2VkIG9uIHlvdXIgbmVlZHMuXG4gICAgICovXG4gICAgaW5qZWN0KCkge1xuICAgICAgICBjb25zdCBtZW51ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgbWVudS5jbGFzc0xpc3QuYWRkKCdjb2xsYXBzaWJsZS1tZW51Jyk7XG5cbiAgICAgICAgY29uc3QgZHJvcGRvd25MaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAgICAgZHJvcGRvd25MaXN0LmNsYXNzTGlzdC5hZGQoJ2Ryb3Bkb3duLW1lbnUnLCAnY29sbGFwc2libGUtZHJvcGRvd24tbGlzdCcpO1xuXG4gICAgICAgIGNvbnN0IGljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIGljb24uY2xhc3NMaXN0LmFkZCgnZmFzJywgJ2ZhLWJhcnMnKTtcblxuICAgICAgICBjb25zdCBkcm9wZG93biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkcm9wZG93bi5jbGFzc0xpc3QuYWRkKCdkcm9wZG93bicsICdjb2xsYXBzaWJsZS1kcm9wZG93bicpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdidG4nLCAnZHJvcGRvd24tdG9nZ2xlJywgJ2NvbGxhcHNpYmxlLXRvZ2dsZScpO1xuXG4gICAgICAgIC8vIENvcHkgaXRlbXMgZnJvbSB0aGUgb3JpZ2luYWwgbmF2YmFyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2xvbmUgPSBpdGVtLmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgY2xvbmUuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICAgICAgICAgICAgZHJvcGRvd25MaXN0LmFwcGVuZChjbG9uZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGJ1dHRvbi5hcHBlbmQoaWNvbik7XG4gICAgICAgIGRyb3Bkb3duLmFwcGVuZChidXR0b24pO1xuICAgICAgICBkcm9wZG93bi5hcHBlbmQoZHJvcGRvd25MaXN0KTtcblxuICAgICAgICBtZW51LmFwcGVuZChkcm9wZG93bik7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChtZW51KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSByZXNpemUgc2Vuc29yIGFuZCBhc3NpZ24gaXQgdGhlIHJpZ2h0IGNhbGxiYWNrLFxuICAgICAqIGNvbnRhaW5pbmcgdGhlIGNvZGUgdG8gY29sbGFwc2UgZXhjZWVkaW5nIGl0ZW1zIHdoZW4gbmVlZGVkLlxuICAgICAqL1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5pbmplY3QoKTtcbiAgICAgICAgdGhpcy5jb2xsYXBzZSgpO1xuICAgICAgICBuZXcgUmVzaXplU2Vuc29yKHRoaXMuY29udGFpbmVyLCB0aGlzLmNvbGxhcHNlLmJpbmQodGhpcykpO1xuICAgIH1cbn1cbiJdLCJmaWxlIjoiY29sbGFwc2libGUuanMifQ==